--- original-gcc/config.sub
+++ gcc/config.sub
@@ -340,6 +340,9 @@ case $basic_machine in
 	ms1)
 		basic_machine=mt-unknown
 		;;
+	riscv)
+		basic_machine=riscv-ucb
+		;;
 
 	strongarm | thumb | xscale)
 		basic_machine=arm-unknown
--- original-gcc/gcc/config.gcc
+++ gcc/gcc/config.gcc
@@ -439,6 +439,10 @@ powerpc*-*-*)
 	esac
 	extra_options="${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt"
 	;;
+riscv*)
+	cpu_type=riscv
+	need_64bit_hwint=yes
+	;;
 rs6000*-*-*)
 	extra_options="${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt"
 	;;
@@ -1976,6 +1980,34 @@ microblaze*-*-elf)
 	cxx_target_objs="${cxx_target_objs} microblaze-c.o"
 	tmake_file="${tmake_file} microblaze/t-microblaze"
         ;;
+riscv32*-*-linux*)
+	tm_file="elfos.h gnu-user.h linux.h glibc-stdint.h riscv/default-32.h ${tm_file} riscv/linux.h riscv/linux64.h"
+	tmake_file="${tmake_file} riscv/t-linux64"
+	gnu_ld=yes
+	gas=yes
+	gcc_cv_initfini_array=yes
+	;;
+riscv*-*-linux*)
+	tm_file="elfos.h gnu-user.h linux.h glibc-stdint.h ${tm_file} riscv/linux.h riscv/linux64.h"
+	tmake_file="${tmake_file} riscv/t-linux64"
+	gnu_ld=yes
+	gas=yes
+	gcc_cv_initfini_array=yes
+	;;
+riscv32*-*-elf*)
+	tm_file="elfos.h newlib-stdint.h riscv/default-32.h ${tm_file} riscv/elf.h"
+	tmake_file="${tmake_file} riscv/t-elf"
+	gnu_ld=yes
+	gas=yes
+	gcc_cv_initfini_array=yes
+	;;
+riscv*-*-elf*)
+	tm_file="elfos.h newlib-stdint.h ${tm_file} riscv/elf.h"
+	tmake_file="${tmake_file} riscv/t-elf"
+	gnu_ld=yes
+	gas=yes
+	gcc_cv_initfini_array=yes
+	;;
 mips*-*-netbsd*)			# NetBSD/mips, either endian.
 	target_cpu_default="MASK_ABICALLS"
 	tm_file="elfos.h ${tm_file} mips/elf.h netbsd.h netbsd-elf.h mips/netbsd.h"
@@ -3860,6 +3892,31 @@ case "${target}" in
 		done
 		;;
 
+	riscv*-*-*)
+		supported_defaults="abi arch arch_32 arch_64 float tune tune_32 tune_64"
+
+		case ${with_float} in
+		"" | soft | hard)
+			# OK
+			;;
+		*)
+			echo "Unknown floating point type used in --with-float=$with_float" 1>&2
+			exit 1
+			;;
+		esac
+
+		case ${with_abi} in
+		"" | 32 | 64)
+			# OK
+			;;
+		*)
+			echo "Unknown ABI used in --with-abi=$with_abi" 1>&2
+			exit 1
+			;;
+		esac
+
+    ;;
+
 	mips*-*-*)
 		supported_defaults="abi arch arch_32 arch_64 float fpu nan fp_32 odd_spreg_32 tune tune_32 tune_64 divide llsc mips-plt synci"
 
--- original-gcc/gcc/configure
+++ gcc/gcc/configure
@@ -23717,6 +23717,25 @@ x3:	.space 4
 	tls_first_minor=14
 	tls_as_opt="-a32 --fatal-warnings"
 	;;
+  riscv*-*-*)
+    conftest_s='
+	.section .tdata,"awT",@progbits
+x:
+	.word 2
+	.text
+	la.tls.gd a0,x
+	la.tls.ie a1,x
+	lui a0,%tls_ie_pcrel_hi(x)
+	lw a0,%pcrel_lo(x)(a0)
+	add a0,a0,tp
+	lw a0,0(a0)
+	lui a0,%tprel_hi(x)
+	add a0,a0,tp,%tprel_add(x)
+	lw a0,%tprel_lo(x)(a0)'
+	tls_first_major=2
+	tls_first_minor=21
+	tls_as_opt='-m32 --fatal-warnings'
+	;;
   s390-*-*)
     conftest_s='
 	.section ".tdata","awT",@progbits
--- original-gcc/gcc/configure.ac
+++ gcc/gcc/configure.ac
@@ -3263,6 +3263,25 @@ x3:	.space 4
 	tls_first_minor=14
 	tls_as_opt="-a32 --fatal-warnings"
 	;;
+  riscv*-*-*)
+    conftest_s='
+	.section .tdata,"awT",@progbits
+x:
+	.word 2
+	.text
+	la.tls.gd a0,x
+	la.tls.ie a1,x
+	lui a0,%tls_ie_pcrel_hi(x)
+	lw a0,%pcrel_lo(x)(a0)
+	add a0,a0,tp
+	lw a0,0(a0)
+	lui a0,%tprel_hi(x)
+	add a0,a0,tp,%tprel_add(x)
+	lw a0,%tprel_lo(x)(a0)'
+	tls_first_major=2
+	tls_first_minor=21
+	tls_as_opt='-m32 --fatal-warnings'
+	;;
   s390-*-*)
     conftest_s='
 	.section ".tdata","awT",@progbits
--- original-gcc/gcc/final.c
+++ gcc/gcc/final.c
@@ -232,6 +232,39 @@
 /* True if profile_function should be called, but hasn't been called yet.  */
 static bool need_profile_function;
 
+#define CFI_3TAG_IS_SOURCE 0x1
+#define CFI_3TAG_IS_TARGET 0x2
+#define CFI_3TAG_IS_FUNCTION_START 0x4
+#define CFI_3TAG_IS_FUNCTION_END 0x8
+
+int cfi_3tag_label_counter = 0;
+class cfi_3tag_info_t {
+ public:
+  unsigned flags;
+  int labelno;
+  void render(FILE *stream) {
+    //    char *const buf = (char *) alloca (40 + strlen (prefix));
+    if (isTarget() && isSource())
+      fprintf(stream, ".Lcfi3t_both_");
+    else if (isTarget())
+      fprintf(stream, ".Lcfi3t_tgt_");
+    else if (isFunctionStart())
+      fprintf(stream, ".Lcfi3t_fn_start");
+    else if (isFunctionEnd())
+      fprintf(stream, ".Lcfi3t_fn_end");
+    else
+      fprintf(stream, ".Lcfi3t_src_");
+    fprintf(stream, "%d", labelno);
+  }
+ private:
+  bool isTarget() { return flags & CFI_3TAG_IS_TARGET; }
+  bool isSource() { return flags & CFI_3TAG_IS_SOURCE; }
+  bool isFunctionStart() { return flags & CFI_3TAG_IS_FUNCTION_START; }
+  bool isFunctionEnd() { return flags & CFI_3TAG_IS_FUNCTION_END; }
+};
+
+static vec<cfi_3tag_info_t> cfi_3tag_meta_data;
+
 static int asm_insn_count (rtx);
 static void profile_function (FILE *);
 static void profile_after_prologue (FILE *);
@@ -1777,6 +1810,114 @@
   return 0;
 }
 
+static void
+cfi_3tag_mark_source_instruction(FILE *stream, int is_target)
+{
+  #if 0
+  cfi_3tag_info_t info;
+  info.flags = is_target ? CFI_3TAG_IS_SOURCE | CFI_3TAG_IS_TARGET : CFI_3TAG_IS_SOURCE;
+  info.labelno = cfi_3tag_label_counter++;
+  info.render(stream);
+  fprintf(stream, ":\n");
+  cfi_3tag_meta_data.safe_push(info);
+  //  info.render(stdout);
+  //  printf("\n");
+  #endif
+}
+
+static void
+cfi_3tag_mark_target_instruction(FILE *stream)
+{
+  cfi_3tag_info_t info;
+
+  info.flags = CFI_3TAG_IS_TARGET;
+  info.labelno = cfi_3tag_label_counter++;
+  info.render(stream);
+  fprintf(stream, ":\n");
+  cfi_3tag_meta_data.safe_push(info);
+  //  info.render(stdout);
+  //  printf("\n");
+}
+
+static void
+cfi_3tag_mark_function_start(FILE *stream)
+{
+  cfi_3tag_info_t info;
+
+  info.flags = CFI_3TAG_IS_FUNCTION_START;
+  info.labelno = cfi_3tag_label_counter++;
+  info.render(stream);
+  fprintf(stream, ":\n");
+  cfi_3tag_meta_data.safe_push(info);
+}
+
+static void
+cfi_3tag_mark_function_end(FILE *stream)
+{
+  cfi_3tag_info_t info;
+
+  info.flags = CFI_3TAG_IS_FUNCTION_END;
+  info.labelno = cfi_3tag_label_counter++;
+  info.render(stream);
+  fprintf(stream, ":\n");
+  cfi_3tag_meta_data.safe_push(info);
+}
+
+static int next_insn_is_target = 0;
+static void
+cfi_3tag_internal_label(FILE *stream, const char *prefix, long labelno)
+{
+  cfi_3tag_mark_target_instruction(stream);
+  next_insn_is_target = 0;
+}
+
+static void
+flush_dover_meta_data(FILE *stream)
+{
+  unsigned ix;
+  cfi_3tag_info_t *start;
+  cfi_3tag_info_t *info;
+  //  int count;
+
+  const char *fnname = get_fnname_from_decl (current_function_decl);
+  start = 0;
+  //  printf("emitting meta data for %s\n", fnname);
+  switch_to_section (text_meta_data_section);
+  //  count = 0;
+  //  FOR_EACH_VEC_ELT(cfi_3tag_meta_data, ix, info)
+  //    {
+  //      count++;
+  //    }
+  fprintf(stream, "\t.word 0x40\n"); // CFI record type
+  fprintf(stream, "\t.word %d\n", cfi_3tag_meta_data.length() * POINTER_SIZE / 8); // CFI record length in bytes
+  //  fprintf(stream, "\t.word %d\n", count * POINTER_SIZE / 8); // CFI record length in bytes
+  #if 0
+  fprintf(stream, "\t.byte 0x00\n"); // padding to dword boundary
+  fprintf(stream, "\t.byte 0x00\n"); // padding to dword boundary
+  fprintf(stream, "\t.byte 0x00\n"); // padding to dword boundary
+  fprintf(stream, "\t.byte 0x00\n"); // padding to dword boundary
+  fprintf(stream, "\t.byte 0x00\n"); // padding to dword boundary
+  #endif
+  //  fprintf(stream, "\t.weakref %s\n", fnname);
+  //  fprintf(stream, "\t.dword %s\n", fnname);
+  //  fprintf(stream, "\t.dword %d\n", cfi_3tag_meta_data.length());
+  FOR_EACH_VEC_ELT(cfi_3tag_meta_data, ix, info)
+  {
+    if (start == 0) {
+      start = info;
+      fprintf(stream, "\t.dword %s\n", fnname);
+    } else {
+    //    fprintf(stream, "\t .dword %d\n", info->flags);
+      fprintf(stream, "\t.dword ");
+      info->render(stream);
+      fprintf(stream, " - ");
+      start->render(stream);
+      fprintf(stream, "\n");
+    }
+  }
+  switch_to_section (current_function_section ());
+}
+
 /* Output assembler code for the start of a function,
    and initialize some of the variables in this file
    for the new function.  The label for the function and associated
@@ -1803,6 +1944,8 @@
 
   high_block_linenum = high_function_linenum = last_linenum;
 
+  cfi_3tag_meta_data.create(0);
+  
   if (flag_sanitize & SANITIZE_ADDRESS)
     asan_function_start ();
 
@@ -1817,6 +1960,9 @@
     leaf_renumber_regs (first);
 #endif
 
+  next_insn_is_target = 0;
+  cfi_3tag_mark_function_start(file);
+
   /* The Sun386i and perhaps other machines don't work right
      if the profiling code comes after the prologue.  */
   if (targetm.profile_before_prologue () && crtl->profile)
@@ -1964,6 +2110,10 @@
     dwarf2out_end_epilogue (last_linenum, last_filename);
 
   some_local_dynamic_name = 0;
+  cfi_3tag_mark_function_end(asm_out_file);
+  ASM_OUTPUT_ALIGN(asm_out_file, 3);
+  flush_dover_meta_data(asm_out_file);
+  cfi_3tag_meta_data.release();
 }
 
 
@@ -2031,6 +2181,9 @@
 
   last_ignored_compare = 0;
 
+  //  printf("creating meta data\n");
+  //  cfi_3tag_meta_data.create(0);
+
 #ifdef HAVE_cc0
   for (insn = first; insn; insn = NEXT_INSN (insn))
     {
@@ -2089,6 +2242,14 @@
       insn = final_scan_insn (insn, file, optimize_p, 0, &seen);
     }
 
+#if 0
+  {
+      int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);
+      switch_to_section (text_meta_data_section);
+      assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);
+  }
+#endif
+
   if (flag_debug_asm)
     {
       free (start_to_bb);
@@ -2445,6 +2606,17 @@
       if (!DECL_IGNORED_P (current_function_decl) && LABEL_NAME (insn))
 	debug_hooks->label (as_a <rtx_code_label *> (insn));
 
+#if 0
+      {
+	printf("here's a label: %s\n", LABEL_NAME(insn));
+	switch_to_section (text_meta_data_section);
+	//	ASM_OUTPUT_LABEL_REF(
+		fprintf(file, "dd %s\n", LABEL_NAME(insn));
+	switch_to_section (current_function_section ());
+	//	assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);
+      }
+#endif
+
       app_disable ();
 
       next = next_nonnote_insn (insn);
@@ -2478,16 +2650,22 @@
 #ifdef ASM_OUTPUT_CASE_LABEL
 	  ASM_OUTPUT_CASE_LABEL (file, "L", CODE_LABEL_NUMBER (insn),
 				 next);
+	  cfi_3tag_internal_label(file, "L", CODE_LABEL_NUMBER(insn));
 #else
 	  targetm.asm_out.internal_label (file, "L", CODE_LABEL_NUMBER (insn));
 #endif
 #endif
 	  break;
 	}
-      if (LABEL_ALT_ENTRY_P (insn))
+      if (LABEL_ALT_ENTRY_P (insn)) {
+	//	printf("alt entry\n");
 	output_alternate_entry_point (file, insn);
+      }
       else
-	targetm.asm_out.internal_label (file, "L", CODE_LABEL_NUMBER (insn));
+	{
+	  cfi_3tag_internal_label(file, "L", CODE_LABEL_NUMBER(insn));
+	  targetm.asm_out.internal_label (file, "L", CODE_LABEL_NUMBER (insn));
+        }
       break;
 
     default:
@@ -2979,11 +3157,20 @@
 
 	NOTICE_UPDATE_CC (body, insn);
 #endif
+	if (JUMP_P(insn) || CALL_P(insn)) {
+	  cfi_3tag_mark_source_instruction(file, next_insn_is_target);
+	  next_insn_is_target = 1;
+	} else if (next_insn_is_target) {
+	  cfi_3tag_mark_target_instruction(file);
+	  next_insn_is_target = 0;
+	}
 
 	current_output_insn = debug_insn = insn;
 
 	/* Find the proper template for this insn.  */
 	templ = get_insn_template (insn_code_number, insn);
+	//	if (templ)
+	//	  printf("templ = '%s'\n", templ);
 
 	/* If the C code returns 0, it means that it is a jump insn
 	   which follows a deleted test insn, and that test insn
--- original-gcc/gcc/output.h
+++ gcc/gcc/output.h
@@ -506,6 +506,7 @@
 struct object_block;
 
 /* Special well-known sections.  */
+extern GTY(()) section *text_meta_data_section;
 extern GTY(()) section *text_section;
 extern GTY(()) section *data_section;
 extern GTY(()) section *readonly_data_section;
--- original-gcc/gcc/varasm.c
+++ gcc/gcc/varasm.c
@@ -150,6 +150,7 @@
 static void mark_weak (tree);
 static void output_constant_pool (const char *, tree);
 
+section *text_meta_data_section;
 /* Well-known sections, each one associated with some sort of *_ASM_OP.  */
 section *text_section;
 section *data_section;
@@ -6101,6 +6102,9 @@
 					       emit_bss);
 #endif
 
+  text_meta_data_section = get_unnamed_section (0, output_section_asm_op,
+					       "\t.section\t.dover_metadata, \"a\"");
+
   targetm.asm_out.init_sections ();
 
   if (readonly_data_section == NULL)
--- original-gcc/gcc/testsuite/gcc.c-torture/execute/20101011-1.c
+++ gcc/gcc/testsuite/gcc.c-torture/execute/20101011-1.c
@@ -6,6 +6,9 @@
 #elif defined (__powerpc__) || defined (__PPC__) || defined (__ppc__) || defined (__POWERPC__) || defined (__ppc)
   /* On PPC division by zero does not trap.  */
 # define DO_TEST 0
+#elif defined (__riscv__)
+  /* On RISC-V division by zero does not trap.  */
+# define DO_TEST 0
 #elif defined (__SPU__)
   /* On SPU division by zero does not trap.  */
 # define DO_TEST 0
--- original-gcc/gcc/testsuite/gcc.dg/20020312-2.c
+++ gcc/gcc/testsuite/gcc.dg/20020312-2.c
@@ -66,6 +66,8 @@ extern void abort (void);
 # else
 #  define PIC_REG  "30"
 # endif
+#elif defined(__riscv__)
+/* No pic register.  */
 #elif defined(__RX__)
 /* No pic register.  */
 #elif defined(__s390__)
--- original-gcc/gcc/testsuite/gcc.dg/20040813-1.c
+++ gcc/gcc/testsuite/gcc.dg/20040813-1.c
@@ -2,7 +2,7 @@
 /* Contributed by Devang Patel  <dpatel@apple.com>  */
 
 /* { dg-do compile } */
-/* { dg-skip-if "No stabs" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* tile*-*-* nios2-*-* *-*-vxworks* nvptx-*-* } { "*" } { "" } } */
+/* { dg-skip-if "No stabs" { aarch64*-*-* mmix-*-* *-*-aix* alpha*-*-* hppa*64*-*-* ia64-*-* riscv*-*-* tile*-*-* nios2-*-* *-*-vxworks* nvptx-*-* } { "*" } { "" } } */
 /* { dg-options "-gstabs" } */
 
 int
--- original-gcc/gcc/testsuite/gcc.dg/stack-usage-1.c
+++ gcc/gcc/testsuite/gcc.dg/stack-usage-1.c
@@ -61,6 +61,8 @@
 #  else
 #    define SIZE 240
 #  endif
+#elif defined (__riscv__)
+#  define SIZE 240
 #elif defined (__AVR__)
 #  define SIZE 254
 #elif defined (__s390x__)
--- original-gcc/libatomic/configure.tgt
+++ gcc/libatomic/configure.tgt
@@ -33,6 +33,7 @@ case "${target_cpu}" in
 	ARCH=alpha
 	;;
   rs6000 | powerpc*)	ARCH=powerpc ;;
+  riscv*)		ARCH=riscv ;;
   sh*)			ARCH=sh ;;
 
   arm*)
--- original-gcc/libgcc/config.host
+++ gcc/libgcc/config.host
@@ -167,6 +167,9 @@ powerpc*-*-*)
 	;;
 rs6000*-*-*)
 	;;
+riscv*)
+	cpu_type=riscv
+	;;
 sparc64*-*-*)
 	cpu_type=sparc
 	;;
@@ -1059,6 +1062,18 @@ powerpcle-*-eabi*)
 	tmake_file="${tmake_file} rs6000/t-ppccomm rs6000/t-crtstuff t-crtstuff-pic t-fdpbit"
 	extra_parts="$extra_parts crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o"
 	;;
+riscv32*-*-linux*)
+	tmake_file="${tmake_file} riscv/t-fpbit riscv/t-dpbit riscv/t-tpbit riscv/t-elf riscv/t-elf32"
+	extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o crtendS.o crtbeginT.o"
+	;;
+riscv*-*-linux*)
+	tmake_file="${tmake_file} riscv/t-fpbit riscv/t-dpbit riscv/t-tpbit riscv/t-elf"
+	extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o crtendS.o crtbeginT.o"
+	;;
+riscv*-*-*)
+	tmake_file="${tmake_file} riscv/t-fpbit riscv/t-dpbit riscv/t-elf"
+	extra_parts="$extra_parts crtbegin.o crtend.o crti.o crtn.o"
+	;;
 rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)
 	md_unwind_header=rs6000/aix-unwind.h
 	tmake_file="t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble"
--- original-gcc/libsanitizer/asan/asan_linux.cc
+++ gcc/libsanitizer/asan/asan_linux.cc
@@ -213,6 +213,11 @@ void GetPcSpBp(void *context, uptr *pc,
   *pc = ucontext->uc_mcontext.gregs[31];
   *bp = ucontext->uc_mcontext.gregs[30];
   *sp = ucontext->uc_mcontext.gregs[29];
+# elif defined(__riscv__)
+  ucontext_t *ucontext = (ucontext_t*)context;
+  *pc = ucontext->uc_mcontext.gregs[REG_PC];
+  *bp = ucontext->uc_mcontext.gregs[REG_S0];
+  *sp = ucontext->uc_mcontext.gregs[REG_SP];
 #else
 # error "Unsupported arch"
 #endif
--- original-gcc/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cc
+++ gcc/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cc
@@ -61,7 +61,8 @@ namespace __sanitizer {
 }  // namespace __sanitizer
 
 #if !defined(__powerpc64__) && !defined(__x86_64__) && !defined(__aarch64__)\
-                            && !defined(__mips__) && !defined(__sparc__)
+                            && !defined(__mips__) && !defined(__sparc__)\
+                            && !defined(__riscv__)
 COMPILER_CHECK(struct___old_kernel_stat_sz == sizeof(struct __old_kernel_stat));
 #endif
 
--- original-gcc/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
+++ gcc/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -72,6 +72,10 @@ namespace __sanitizer {
   const unsigned struct_kernel_stat_sz = 144;
   #endif
   const unsigned struct_kernel_stat64_sz = 104;
+#elif defined(__riscv__)
+  const unsigned struct___old_kernel_stat_sz = 0;
+  const unsigned struct_kernel_stat_sz = 128;
+  const unsigned struct_kernel_stat64_sz = 128;
 #elif defined(__sparc__) && defined(__arch64__)
   const unsigned struct___old_kernel_stat_sz = 0;
   const unsigned struct_kernel_stat_sz = 104;
@@ -511,7 +515,7 @@ namespace __sanitizer {
   typedef long __sanitizer___kernel_off_t;
 #endif
 
-#if defined(__powerpc__) || defined(__mips__)
+#if defined(__powerpc__) || defined(__mips__) || defined(__riscv__)
   typedef unsigned int __sanitizer___kernel_old_uid_t;
   typedef unsigned int __sanitizer___kernel_old_gid_t;
 #else
diff -ru gcc-5.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform.h gcc-5.1.0/libsanitizer/sanitizer_common/sanitizer_platform.h
--- gcc-5.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform.h	2015-05-13 19:36:27.061421043 -0700
+++ gcc-5.1.0/libsanitizer/sanitizer_common/sanitizer_platform.h	2015-05-13 19:44:19.274355577 -0700
@@ -98,9 +98,9 @@
 
 // The AArch64 linux port uses the canonical syscall set as mandated by
 // the upstream linux community for all new ports. Other ports may still
-// use legacy syscalls.
+// use legacy syscalls.  The RISC-V port also does this.
 #ifndef SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
-# if defined(__aarch64__) && SANITIZER_LINUX
+# if (defined(__aarch64__) || defined(__riscv__)) && SANITIZER_LINUX
 # define SANITIZER_USES_CANONICAL_LINUX_SYSCALLS 1
 # else
 # define SANITIZER_USES_CANONICAL_LINUX_SYSCALLS 0
diff -ru gcc-5.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h gcc-5.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
--- gcc-5.1.0.orig/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h	2015-05-13 19:36:27.061421043 -0700
+++ gcc-5.1.0/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h	2015-05-13 19:39:13.515487834 -0700
@@ -73,7 +73,6 @@
   #endif
   const unsigned struct_kernel_stat64_sz = 104;
 #elif defined(__riscv__)
-  const unsigned struct___old_kernel_stat_sz = 0;
   const unsigned struct_kernel_stat_sz = 128;
   const unsigned struct_kernel_stat64_sz = 128;
 #elif defined(__sparc__) && defined(__arch64__)
@@ -104,7 +103,7 @@
 
 #if SANITIZER_LINUX || SANITIZER_FREEBSD
 
-#if defined(__powerpc64__)
+#if defined(__powerpc64__) || defined(__riscv__)
   const unsigned struct___old_kernel_stat_sz = 0;
 #elif !defined(__sparc__)
   const unsigned struct___old_kernel_stat_sz = 32;
--- original-gcc/libstdc++-v3/configure
+++ gcc/libstdc++-v3/configure
@@ -16641,7 +16641,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
   # Long term, -std=c++0x could be even better, could manage to explicitly
   # request C99 facilities to the underlying C headers.
   ac_save_CXXFLAGS="$CXXFLAGS"
-  CXXFLAGS="$CXXFLAGS -std=c++98"
+  CXXFLAGS="$CXXFLAGS -std=gnu++98"
   ac_save_LIBS="$LIBS"
   ac_save_gcc_no_link="$gcc_no_link"
 
@@ -17263,9 +17263,11 @@ rm -f core conftest.err conftest.$ac_obj
 $as_echo "$glibcxx_cv_c99_wchar" >&6; }
   fi
 
+  # For newlib, don't check complex since missing c99 functions, but
+  #   rest of c99 stuff is there so don't loose it
   # Option parsed, now set things appropriately.
   if test x"$glibcxx_cv_c99_math" = x"no" ||
-     test x"$glibcxx_cv_c99_complex" = x"no" ||
+     # test x"$glibcxx_cv_c99_complex" = x"no" ||
      test x"$glibcxx_cv_c99_stdio" = x"no" ||
      test x"$glibcxx_cv_c99_stdlib" = x"no" ||
      test x"$glibcxx_cv_c99_wchar" = x"no"; then

